// Copyright 2021 The Codefresh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.// Code generated by mockery v1.1.1. DO NOT EDIT.

package mocks

import (
	context "context"

	git "github.com/codefresh-io/pkg/git"
	mock "github.com/stretchr/testify/mock"
)

// Provider is an autogenerated mock type for the Provider type
type Provider struct {
	mock.Mock
}

// CreateRepository provides a mock function with given fields: ctx, opts
func (_m *Provider) CreateRepository(ctx context.Context, opts *git.CreateRepoOptions) (string, error) {
	ret := _m.Called(ctx, opts)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *git.CreateRepoOptions) string); ok {
		r0 = rf(ctx, opts)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *git.CreateRepoOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRepository provides a mock function with given fields: ctx, opts
func (_m *Provider) GetRepository(ctx context.Context, opts *git.GetRepoOptions) (string, error) {
	ret := _m.Called(ctx, opts)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *git.GetRepoOptions) string); ok {
		r0 = rf(ctx, opts)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *git.GetRepoOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
